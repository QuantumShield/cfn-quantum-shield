---
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::LanguageExtensions
Description: >-
  This template deploys a Quantum Shield ASG behind an NLB in two
  private subnets. **WARNING** This template creates EC2 instances
  and related resources. You will be billed for the AWS resources
  used if you create a stack from this template. (qs-1s1eguak1)

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network configuration
      Parameters:
      - VPCID
      - PrivateSubnetIDs
      - PublicSubnetIDs
    - Label:
        default: Amazon EC2 configuration
      Parameters:
      - KeyPairName
      - QuantumShieldInstanceType
    - Label:
        default: Quantum Shield nodes configuration
      Parameters:
      - QuantumShieldNodesMinSize
      - QuantumShieldNodesMaxSize
      - QuantumShieldNodesDesiredCapacity
      - OperatorEmail
    - Label:
        default: DNS configuration
      Parameters:
      - QuantumShieldFQDN
      - Route53HostedZoneId
      - UpstreamEndpoint
      - UpstreamHostname
    ParameterLabels:
      KeyPairName:
        default: SSH key name
      OperatorEmail:
        default: Operator email
      PrivateSubnetIDs:
        default: List of private subnet IDs
      PublicSubnetIDs:
        default: List of public subnet IDs
      VPCID:
        default: VPC ID
      QuantumShieldInstanceType:
        default: Quantum Shield servers instance type
      QuantumShieldNodesDesiredCapacity:
        default: Quantum Shield nodes desired capacity
      QuantumShieldNodesMaxSize:
        default: Quantum Shield nodes max size
      QuantumShieldNodesMinSize:
        default: Quantum Shield nodes min size
      QuantumShieldFQDN:
        default: Domain name to point at Quantum Shield
      Route53HostedZoneId:
        default: Route53 Hosted Zone ID to create record set pointing at Quantum Shield
      UpstreamEndpoint:
        default: Upstream endpoint (ALB DNS name or IP) for Quantum Shield to proxy requests to
      UpstreamHostname:
        default: Hostname to use for host header with forwarding traffic to the upstream endpoint. (i.e. for an upstream endpoint of "https://example.com", the hostname would be "example.com")

Parameters:
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  OperatorEmail:
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: Must be a valid email address.
    Description: Email address that notifications of any scaling operations will be sent to.
    Type: String
  PrivateSubnetIDs:
    Description: List of IDs of private subnets for the Quantum Shield (e.g., subnet-a0246dcd,subnet-e78c13ff).
    Type: List<AWS::EC2::Subnet::Id>
  PublicSubnetIDs:
    Description: List of IDs of public subnets for the network load balancer (e.g., subnet-9bc642ac,subnet-6a35b931).
    Type: List<AWS::EC2::Subnet::Id>
  VPCID:
    Description: ID of your existing VPC for deployment.
    Type: AWS::EC2::VPC::Id
  QuantumShieldInstanceType:
    AllowedValues:
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.8xlarge
    - m5.12xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - c5.12xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r5.large
    - r5.xlarge
    - r5.2xlarge
    - r5.4xlarge
    ConstraintDescription: Must contain valid instance type
    Default: c5.large
    Description: Type of EC2 instance for the workload instances.
    Type: String
  QuantumShieldNodesDesiredCapacity:
    Default: '2'
    Description: Desired capacity for the workload nodes Auto Scaling group.
    Type: String
  QuantumShieldNodesMaxSize:
    Default: '4'
    Description: Maximum size of the Auto Scaling group.
    Type: String
  QuantumShieldNodesMinSize:
    Default: '2'
    Description: Minimum size of the Auto Scaling group.
    Type: String
  QuantumShieldFQDN:
    AllowedPattern: ((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: Must be a valid FQDN.
    Description: FQDN to create in Route53 and to request a valid TLS certificate for.
    Type: String
  Route53HostedZoneId:
    Description: Route53 HostedZoneId for hosted zone to create record pointing at Quantum Shield.
    Type: String
  UpstreamEndpoint:
    Description: Upstream endpoint to configure Quantum Shield to proxy requests to.
    Type: String
    Default: https://example.com
  UpstreamHostname:
    Description: Hostname to set in Host header for traffic forwarded to the upstream endpoint.
    Type: String
    Default: example.com

Rules:
  KeyPairsNotEmpty:
    Assertions:
    - Assert: !Not
      - !EachMemberEquals
        - !RefAll AWS::EC2::KeyPair::KeyName
        - ''
      AssertDescription: All key pair parameters must not be empty
  SubnetsInVPC:
    Assertions:
    - Assert: !EachMemberIn
      - !ValueOfAll
        - AWS::EC2::Subnet::Id
        - VpcId
      - !RefAll AWS::EC2::VPC::Id
      AssertDescription: All subnets must in the VPC

Conditions:
  CreateRoute53Record:
    !Not [!Equals [!Ref Route53HostedZoneId, '']]

Mappings:
  AWSAMIRegionMap:
    AMI:
      QNTMSHLD: lastwall-quantum-shield-ami-2024-10-03T15-10-39.280Z-prod-e2d2tdy3cyfle
    ap-southeast-2:
      QNTMSHLD: ami-0d222ed15f9460df3
    ca-central-1:
      QNTMSHLD: ami-033b050a08cca6652
    eu-central-1:
      QNTMSHLD: ami-0f5a065bbce552116
    eu-west-1:
      QNTMSHLD: ami-0f33197b77f966c42
    eu-west-2:
      QNTMSHLD: ami-0cc364552344b6d41
    eu-west-3:
      QNTMSHLD: ami-08097b3ea92a5b469
    eu-north-1:
      QNTMSHLD: ami-0e04c5692f751c244
    us-east-1:
      QNTMSHLD: ami-0245042e723f97f13
    us-east-2:
      QNTMSHLD: ami-00f40efd5cc87737d
    us-west-1:
      QNTMSHLD: ami-04b9eb87eb69fbde9
    us-west-2:
      QNTMSHLD: ami-0ede864bb3dc84413
    us-gov-east-1:
      QNTMSHLD: ami-0ffc2a571d88d03bf
    us-gov-west-1:
      QNTMSHLD: ami-0674c751efe53a0cd

Resources:
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/sns
      Subscription:
      - Endpoint: !Ref OperatorEmail
        Protocol: email

  #########################
  # Network Load Balancer #
  #########################
  NLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to the ELB
      VpcId: !Ref VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internet-facing
      Subnets: !Ref PublicSubnetIDs
      SecurityGroups:
      - !Ref NLBSecurityGroup
      LoadBalancerAttributes:
      - Key: deletion_protection.enabled
        Value: true

  Fn::ForEach::TargetGroups:
  - PortNumber
  - ['80', '443']
  - 'TargetGroup${PortNumber}':
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Port: !Ref PortNumber
        Protocol: TCP
        VpcId: !Ref VPCID
        TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true

  Fn::ForEach::NLBListeners:
  - PortNumber
  - ['80', '443']
  - 'NLBListener${PortNumber}':
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: !Sub TargetGroup${PortNumber}
        LoadBalancerArn: !Ref NetworkLoadBalancer
        Port: !Ref PortNumber
        Protocol: TCP

  NetworkLoadBalancerAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt NetworkLoadBalancer.LoadBalancerFullName
        - Name: TargetGroup
          Value: !GetAtt TargetGroup443.TargetGroupFullName
      MetricName: UnHealthyHostCount
      Period: 60
      Statistic: Average
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      EvaluationPeriods: 1

  ############################
  # Quantum Shield Instances #
  ############################
  QuantumShieldRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
      - PolicyName: CloudWatchMetricsAccess
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
            - cloudwatch:EnableAlarmActions
            - cloudwatch:PutMetricAlarm
            Resource:
            - !Sub arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*
      - PolicyName: EFSAccess
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - elasticfilesystem:ClientMount
            - elasticfilesystem:ClientWrite
            - elasticfilesystem:ClientRootAccess
            Resource:
            - '*'
            Condition:
              Bool:
                aws:SecureTransport: true

  QuantumShieldRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref QuantumShieldRole

  QuantumShieldSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to the Quantum Shield instances
      VpcId: !Ref VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref NLBSecurityGroup
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref NLBSecurityGroup

  QuantumShieldASLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          quickstart:
          - efs
          - nginx
          certbot:
          - certbot
        efs:
          packages:
            yum:
              amazon-efs-utils: []
          commands:
            mountefs:
              command: !Sub |
                mkdir -p /mnt/efs

                # wait for DNS to register
                while ! host ${ElasticFileSystem}.efs.${AWS::Region}.amazonaws.com
                do
                  sleep 5
                done
                mount -t efs -o tls,iam ${ElasticFileSystem}:/ /mnt/efs

                # link subfolders into place
                mkdir -p /mnt/efs/letsencrypt
                ln -sf /mnt/efs/letsencrypt /etc/letsencrypt
                mkdir -p /mnt/efs/nginx.conf.d
                rm -rf /etc/nginx/conf.d
                ln -sf /mnt/efs/nginx.conf.d /etc/nginx/conf.d
                mkdir -p /mnt/efs/acme-challenge
                mkdir -p /usr/share/nginx/html/.well-known
                ln -sf /mnt/efs/acme-challenge /usr/share/nginx/html/.well-known/acme-challenge
        nginx:
          packages:
            yum:
              python3-certbot-nginx: []
          files:
            /etc/nginx/conf.d/default.conf:
              mode: '000644'
              owner: root
              group: root
              content: !Sub |
                server {
                  listen  443 ssl;

                  ssl_certificate      /etc/letsencrypt/live/${QuantumShieldFQDN}/fullchain.pem;
                  ssl_certificate_key  /etc/letsencrypt/live/${QuantumShieldFQDN}/privkey.pem;

                  ssl_session_cache    shared:SSL:1m;
                  ssl_session_timeout  5m;

                  ssl_ciphers  HIGH:!aNULL:!MD5;
                  ssl_prefer_server_ciphers  on;

                  ssl_protocols   TLSv1.3 TLSv1.2;                     # Enable both TLSv1.3 and TLSv1.2
                  ssl_ecdh_curve  X25519Kyber768Draft00:X25519:P-256;  # Enable Kyber with fallback to classical X25519 or prime order curve

                  location ^~ /.well-known/acme-challenge/ {
                    root     /usr/share/nginx/html;

                    if_modified_since  off;
                    expires            off;
                    etag               off;
                  }

                  location / {
                    #resolver            8.8.8.8;
                    proxy_pass          ${UpstreamEndpoint};
                    proxy_no_cache      1;
                    proxy_cache_bypass  1;
                    proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header    Host "${UpstreamHostname}";

                    if_modified_since  off;
                    expires            off;
                    etag               off;
                  }
                }

                server {
                  if ($host = ${QuantumShieldFQDN}) {
                    return  301 https://$host$request_uri;
                  }

                  listen  80 default_server;

                  server_name  ${QuantumShieldFQDN};
                  return       404;
                }
          commands:
            nginx:
              command: |
                systemctl reload nginx.service
          services:
            systemd:
              nginx:
                enabled: true
                ensureRunning: true
                files:
                - /etc/nginx/nginx.conf
                - /etc/nginx/conf.d/default.conf
                sources:
                - /usr/share/nginx/html
        certbot:
          packages:
            yum:
              python3-certbot-nginx: []
          commands:
            certbot:
              command: !Sub |
                certbot -a webroot -i nginx -w /usr/share/nginx/html -d ${QuantumShieldFQDN} --register-unsafely-without-email --agree-tos
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !FindInMap
      - AWSAMIRegionMap
      - !Ref AWS::Region
      - QNTMSHLD
      InstanceMonitoring: true
      IamInstanceProfile: !Ref QuantumShieldRoleProfile
      InstanceType: !Ref QuantumShieldInstanceType
      SecurityGroups:
      - !Ref QuantumShieldSecurityGroup
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          cfn-init -v --stack ${AWS::StackName} --resource QuantumShieldASLaunchConfig --configsets quickstart --region ${AWS::Region}
          # Signal the status from cfn-init
          cfn-signal -e $? --stack ${AWS::StackName} --resource QuantumShieldAutoScalingGroup --region ${AWS::Region}

  QuantumShieldScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref QuantumShieldAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: 1

  QuantumShieldScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref QuantumShieldAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: -1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 60% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 60
      AlarmActions:
      - !Ref QuantumShieldScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref QuantumShieldAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 40% for 30 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 30
      Threshold: 40
      AlarmActions:
      - !Ref QuantumShieldScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref QuantumShieldAutoScalingGroup
      ComparisonOperator: LessThanThreshold

  QuantumShieldAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PrivateSubnetIDs
      Cooldown: '600'
      DesiredCapacity: !Ref QuantumShieldNodesDesiredCapacity
      HealthCheckGracePeriod: 600
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref QuantumShieldASLaunchConfig
      MaxSize: !Ref QuantumShieldNodesMaxSize
      MinSize: !Ref QuantumShieldNodesMinSize
      NotificationConfigurations:
      - TopicARN: !Ref NotificationTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        - autoscaling:TEST_NOTIFICATION
      Tags:
      - Key: Name
        Value: QuantumShield
        PropagateAtLaunch: true
      - Key: QuantumShieldFQDN
        Value: !Ref QuantumShieldFQDN
        PropagateAtLaunch: true
      TargetGroupARNs:
      - !GetAtt TargetGroup80.TargetGroupArn
      - !GetAtt TargetGroup443.TargetGroupArn
    CreationPolicy:
      ResourceSignal:
        Count: !Ref QuantumShieldNodesDesiredCapacity
        Timeout: PT10M

  #######################
  # Elastic File System #
  #######################
  ElasticFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: ENABLED
      Encrypted: true
      FileSystemPolicy:
        Version: 2012-10-17
        Statement:
        - Principal:
            AWS: !GetAtt QuantumShieldRole.Arn
          Effect: Allow
          Action:
          - elasticfilesystem:ClientMount
          - elasticfilesystem:ClientWrite
          Resource: '*'
          Condition:
            Bool:
              aws:SecureTransport: true
              elasticfilesystem:AccessedViaMountTarget: true
      ThroughputMode: bursting

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to EFS
      VpcId: !Ref VPCID
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        SourceSecurityGroupId: !Ref QuantumShieldSecurityGroup

  Fn::ForEach::EFSMountTargets:
  - SubnetID
  - !Ref PrivateSubnetIDs
  - 'EFSMountTarget&{SubnetID}':
      Type: AWS::EFS::MountTarget
      Properties:
        FileSystemId: !Ref ElasticFileSystem
        SubnetId: !Ref SubnetID
        SecurityGroups:
        - !Ref EFSSecurityGroup

  #######
  # DNS #
  #######
  Route53Record:
    Type: AWS::Route53::RecordSet
    Condition: CreateRoute53Record
    Properties:
      Type: A
      HostedZoneId: !Ref Route53HostedZoneId
      Name: !Ref QuantumShieldFQDN
      AliasTarget:
        DNSName: !GetAtt NetworkLoadBalancer.DNSName
        HostedZoneId: !GetAtt NetworkLoadBalancer.CanonicalHostedZoneID

  ##########################
  # TLS Renewal Automation #
  ##########################
  TLSRenewalExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: AccessPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeInstances
            - ssm:SendCommand
            - ssm:GetCommandInvocation
            Resource: '*'

  TLSRenewalSchedule:
    Type: AWS::Events::Rule
    DependsOn: QuantumShieldAutoScalingGroup
    Properties:
      Description: Schedule TLS Renewal Lambda function.
      ScheduleExpression: rate(1 day)
      State: ENABLED
      Targets:
      - Arn: !Sub ${TLSRenewalFunction.Arn}
        Id: TLSRenewalSchedule

  TLSRenewalSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${TLSRenewalFunction.Arn}
      Principal: events.amazonaws.com
      SourceArn: !Sub ${TLSRenewalSchedule.Arn}

  TLSRenewalFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Execute TLS Renewal on Quantum Shield instance.
      Runtime: python3.12
      MemorySize: 128
      Timeout: 30
      Role: !Sub ${TLSRenewalExecutionRole.Arn}
      Handler: index.handler
      Code:
        ZipFile: !Sub |
          import logging
          import time
          import boto3

          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)

          session = boto3.Session()
          ec2 = session.client('ec2', region_name='${AWS::Region}')
          ssm = session.client('ssm', region_name='${AWS::Region}')

          def handler(event, context):
            logger.info('Looking up an instance to execute TLS renewal')
            instances = [
              instance
              for reservation in ec2.describe_instances(
                Filters=[
                  {
                    'Name': 'tag:QuantumShieldFQDN',
                    'Values': ['${QuantumShieldFQDN}']
                  },
                  {
                    'Name': 'instance-state-name',
                    'Values': ['running']
                  }
                ]
              ).get('Reservations', [{}])
              for instance in reservation.get('Instances', [{}])
            ]
            instance_id = instances[0].get('InstanceId', '')

            logger.info('Found instance id: %s', instance_id)

            command = ssm.send_command(
              InstanceIds=[instance_id],
              DocumentName='AWS-RunShellScript',
              Parameters={
                'commands': [
                  'sudo rm /etc/letsencrypt/.reload_nginx; sudo certbot certonly --non-interactive --webroot -w /usr/share/nginx/html -d ${QuantumShieldFQDN} --register-unsafely-without-email --agree-tos --deploy-hook "touch /etc/letsencrypt/.reload_nginx" | sudo tee -a /var/log/certbot.log'
                ]
              }
            )
            command_id = command.get('Command').get('CommandId')

            logger.info(
              'TLS renewal command %s sent to instance %s',
              command_id,
              instance_id
            )

            time.sleep(2)       # workaround SSM being eventually consistent

            command_status = 'Pending'
            while command_status not in ['Success', 'Cancelled', 'TimedOut', 'Failed']:
              command_status = ssm.get_command_invocation(
                InstanceId=instance_id,
                CommandId=command_id
              ).get('Status')

            logger.info(
              'TLS renewal command %s ended with status %s. Sending nginx reload command to all instances.',
              command_id,
              command_status
            )

            instance_ids = [
              instance.get('InstanceId', '')
              for instance in instances
            ]
            ssm.send_command(
              InstanceIds=instance_ids,
              DocumentName='AWS-RunShellScript',
              Parameters={
                'commands': [
                  'if [[ -f /etc/letsencrypt/.reload_nginx ]]; then sudo systemctl reload nginx; else echo "skipping nginx reload"; fi'
                ]
              }
            )

            logger.info('nginx reload command sent to instances %s', instance_ids)

Outputs:
  NLBDNSName:
    Description: NLB DNS Name
    Value: !GetAtt NetworkLoadBalancer.DNSName
